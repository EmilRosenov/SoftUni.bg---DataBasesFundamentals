
CREATE DATABASE [Bitbucket]
GO
USE [Bitbucket]
GO

--USE [BookShop]
--GO

--DROP  DATABASE [Bitbucket]
--DROP TABLE Repositories

CREATE TABLE [Users]
(
 [Id] INT NOT NULL PRIMARY KEY IDENTITY(1,1),
 [Username] VARCHAR(30) NOT NULL,
 [Password] VARCHAR(30) NOT NULL,
 [Email] VARCHAR(50) NOT NULL
)

CREATE TABLE [Repositories]
(
 [Id] INT  NOT NULL PRIMARY KEY IDENTITY(1,1),
 [Name] VARCHAR(50) NOT NULL
)

CREATE TABLE [RepositoriesContributors]
(
 [RepositoryId] INT NOT NULL FOREIGN KEY REFERENCES [Repositories](Id),
 [ContributorId] INT NOT NULL FOREIGN KEY REFERENCES [Users](Id),
 PRIMARY KEY ([RepositoryId],[ContributorId])
)
 
 
CREATE TABLE [Issues]
(
 [Id] INT PRIMARY KEY IDENTITY,
 [Title] VARCHAR(255) NOT NULL,
 [IssueStatus] VARCHAR(6) NOT NULL,
 [RepositoryId] INT NOT NULL identity(1,1) FOREIGN KEY
 REFERENCES [Repositories]([Id]) ,
 [AssigneeId] INT NOT NULL  identity(1,1) FOREIGN KEY  
 REFERENCES [Users]([Id]) 
 )


CREATE TABLE [Commits] 
(
 [Id] INT PRIMARY KEY IDENTITY,
 [Message] VARCHAR(255) NOT NULL,
 [IssueId] INT FOREIGN KEY  REFERENCES [Issues]([Id]),
 [RepositoryId] INT  NOT NULL FOREIGN KEY  REFERENCES [Repositories]([Id]),
 [ContributorId] INT  NOT NULL FOREIGN KEY  REFERENCES [Users]([Id])
)

CREATE TABLE [Files] 
(
 [Id] INT PRIMARY KEY IDENTITY ,
 [Name] VARCHAR(100) NOT NULL,
 [Size] DECIMAL(15,2) NOT NULL,
 [ParentId] INT  Identity(1,1) FOREIGN KEY  REFERENCES [Files]([Id]),
 [CommitId] INT  Identity(1,1) not null FOREIGN KEY    REFERENCES  [Commits]([Id])
)

--02
insert into [Files]([Name],[Size])Values
('Trade.idk', 2598.00),
('menu.net', 9238.31),
('Administrate.soshy', 1246.93),
('Controller.php', 7353.15),
('Find.java', 9957.86),
('Controller.json', 14034.87),
('Operate.xix', 7662.92)

select [Name],[Size],[ParentId],[CommitId]
from Files


insert into [Issues]([Title],[IssueStatus])Values
('Critical Problem with HomeController.cs file', 'open'),
('Typo fix in Judge.html', 'open'),
('Implement documentation for UsersService.cs', 'closed'),
('Unreachable code in Index.cs', 'open')

Select [Title],[IssueStatus],[RepositoryId],[AssigneeId]
from Issues

--03
UPDATE Issues
SET IssueStatus = 'closed'
WHERE AssigneeId = 6

--problem 04
--Delete repository "Softuni-Teamwork" in repository contributors and issues.

select [Id]  
from [Repositories]
where [Name]='Softuni-Teamwork'

DELETE FROM [RepositoriesContributors]
WHERE [RepositoryId]=3

DELETE FROM [Issues]
WHERE [RepositoryId]=3

--05. Commits
--Select all commits from the database.
--Order them by id (ascending),
-- message (ascending),
-- repository id (ascending) 
--and contributor id (ascending).

Select [Id],[Message],[RepositoryId],[ContributorId]
from [Commits]
ORDER BY(id), [Message], [RepositoryId] ,[ContributorId]


--06. Front-end
--Select all of the files, which have size, greater than 1000,
-- and a name containing "html". 
--Order them by size (descending),
--id (ascending) and by file name (ascending).

SELECT [Id],[Name],[Size] 
  FROM [Files]
 WHERE [Size] > 1000 and [Name] LIKE '%html'
ORDER BY [Size] DESC, [Id], [Name]

--07. Issue Assignment   0pts
--Select all of the issues, and the users that are assigned to them,
--so that they end up in the following format:
-- {username} : {issueTitle}. 
--Order them by issue id (descending) and issue assignee (ascending).

Select  i.Id, CONCAT([u].[Username],' : ',[i].[Title])AS[IssueAssignee] 
       from Issues
         AS [i]
Left join [Users]
         AS [u]
		 ON i.AssigneeId=u.Id
		 ORDER BY i.Id desc ,i.AssigneeId


--08.Single Files  0pts
--Select all of the files, which are NOT a parent to any other file.
--Select their size of the file and add "KB" to the end of it.
--Order them file id (ascending), file name (ascending) and file size (descending).

select [fp].[id],[fp].[Name], CONCAT([fp].[Size],'KB') AS[Size] 
  from Files 
    as [fch]
Right Join [Files]
    as [fp]
    On [fch].[ParentId]=[fp].[Id]
 where [fch].[id] IS NULL
order by [fp].[Id],[fp].[Name], [fp].[Size]desc

--09. Commits in Repositories 0 pts
--Select the top 5 repositories in terms of count of commits. 
--Order them by commits count (descending), repository id (ascending)
--then by repository name (ascending).
    select top(5)
		   [r].Id,
		   [r].[Name],
		   Count(r.Id) AS [Commits]
		   from 
           [Repositories] 
		As [r]
left join  [Commits]
		As [c] ON [r].Id = [c].[RepositoryId]
left join  [RepositoriesContributors] 
	    AS [rc] ON rc.RepositoryId = r.Id
  Group by [r].Id, [r].[Name]
  order by [Commits]desc, [r].Id,[r].[Name]


-- 10.	Average Size   0pts
--Select all users which have commits. 
--Select their username and average size of the file, 
--which were uploaded by them. 
--Order the results by average upload size (descending) 
--and by username (ascending).

SELECT u.Username, AVG([f].[Size]) AS [Size] 
	 from [Users]
	   AS [u]
JOIN [Commits]
       AS [c] 
       ON [u].[Id] = [c].[ContributorId]
JOIN [Files]
	   AS [f]
	   ON [f].[CommitId] = [c].[Id]
 GROUP BY [u].Username
 Order by [Size] desc, u.Username


--11.	All User Commits
--Create a user defined function, 
--named udf_AllUserCommits(@username) that receives a username.
--The function must return count of all commits for the user:

--INPUT SELECT dbo.udf_AllUserCommits('UnderSinduxrein')
--OUTPUT 6  0pts
GO

CREATE FUNCTION udf_AllUserCommits(@username VARCHAR(30))
Returns INT
AS
BEGIN
		DECLARE @userID INT = (
				          SELECT [Id]
                                                                      FROM [Users]
				          WHERE [Username] = @username
				          )
		DECLARE @countCommits INT = (
					        SELECT COUNT([Id])
					         FROM [Commits]
					       WHERE [ContributorId] = @userID
					        ) 			

		RETURN  @countCommits
END

GO

SELECT dbo.udf_AllUserCommits('UnderSinduxrein')

GO

--12. Search for Files   0pts

--Create a user defined stored procedure, named usp_SearchForFiles(@fileExtension), that receives files extensions.
--The procedure must print the id, name and size of the file. 
--Add "KB" in the end of the size. 
--Order them by id (ascending), file name (ascending) and file size (descending)

CREATE PROC usp_SearchForFiles @fileExtension VARCHAR(100)
AS
BEGIN
		SELECT [Id],[Name],concat([Size],'KB') AS[Size]
		  FROM [Files]
		 WHERE [Name]  like CONCAT('%[.]', @fileExtension)
	  ORDER BY [Id],[Name],[Size] DESC
END
GO
EXEC usp_SearchForFiles 'txt'
