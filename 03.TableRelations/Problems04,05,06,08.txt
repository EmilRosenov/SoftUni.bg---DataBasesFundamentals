--Problem 04.Self-Referencing
CREATE TABLE [Teachers](
[TeacherID] INT PRIMARY KEY Identity (101,1),
[Name] VARCHAR(40) NOT NULL,
[ManagerID] INT FOREIGN KEY REFERENCES [Teachers]([TeacherID])
)


INSERT INTO [Teachers]([Name], [ManagerID]) VALUES
('John', NULL),
('Maya', 106),
('Silvia', 106),
('Ted', 105),
('Mark', 101),
('Greta', 101)

select*from[Teachers]

--Problem 05. Online Store Database

CREATE TABLE [Cities](
[CityID] INT PRIMARY KEY,
[Name] VARCHAR(50) NOT NULL
)

CREATE TABLE[Customers](
[CustomerID] INT PRIMARY KEY,
[Name] VARCHAR(50) NOT NULL,
[Birthday] DATE NOT NULL,
[CityID] INT FOREIGN KEY REFERENCES[Cities]([CityID])
)

CREATE TABLE[Orders](
[OrderID] INT PRIMARY KEY,
[CustomerID] INT FOREIGN KEY REFERENCES[Customers]([CustomerID])
)

CREATE TABLE [ItemTypes](
[ItemTypeID] INT PRIMARY KEY,
[Name] VARCHAR(50) NOT NULL
)

CREATE TABLE [Items](
[ItemID] INT PRIMARY KEY,
[Name] VARCHAR(50) NOT NULL,
[ItemTypeID] INT FOREIGN KEY REFERENCES[ItemTypes]([ItemTypeID])
)

CREATE TABLE[OrderItems](
[OrderID] INT FOREIGN KEY REFERENCES[Orders]([OrderID]),
[ItemID] INT FOREIGN KEY REFERENCES[Items] ([ItemID]),
PRIMARY KEY([OrderID], [ItemID])
)

--Problem 6.	University Database
CREATE TABLE [Majors](
[MajorID] INT PRIMARY KEY,
[Name] VARCHAR(50) NOT NULL
)

CREATE TABLE [Students](
[StudentID] INT PRIMARY KEY,
[StudentNumber] VARCHAR(10) NOT NULL,
[StudentName] VARCHAR(50) NOT NULL,
[MajorID] INT FOREIGN KEY REFERENCES[Majors]([MajorID])
)

CREATE TABLE [Payments](
[PaymentID] INT PRIMARY KEY,
[PaymentDate] DATE NOT NULL,
[PaymentAmount] DECIMAL(8,2) NOT NULL,
[StudentID] INT FOREIGN KEY REFERENCES[Students]([StudentID])
)

CREATE TABLE [Subjects](
[SubjectID] INT PRIMARY KEY,
[SubjectName] VARCHAR(50) NOT NULL
)


CREATE TABLE [Agenda](
[StudentID] INT FOREIGN KEY REFERENCES [Students]([StudentID]),
[SubjectID] INT FOREIGN KEY REFERENCES [Subjects]([SubjectID]),
PRIMARY KEY ([StudentID],[SubjectID])
)

--Problem 09. Peaks in Rila*
GO 
USE [Geography]
GO

	SELECT m.[MountainRange], p.[PeakName], P.[Elevation]
	  FROM [Mountains] AS [m]
 LEFT JOIN [Peaks]     AS [p]
		ON p.[MountainId] = m.[Id]
     WHERE [MountainRange]='Rila'
  ORDER BY p.[Elevation] DESC